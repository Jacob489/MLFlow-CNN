name: Test Notebook with repo2docker

on:
  push:
  pull_request:

jobs:
  repo2docker-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install repo2docker & Docker client
        run: |
          python -m pip install --upgrade pip
          pip install jupyter-repo2docker docker

      - name: Create minimal CI notebook
        run: |
          cat > CI_MLFLOW.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Minimal Notebook for CI Testing\n",
    "\n",
    "This is a minimal version for CI testing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Basic imports\n",
    "import os\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "print(\"TensorFlow version:\", tf.__version__)\n",
    "print(\"CI Testing Environment\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Create minimal model\n",
    "inputs = tf.keras.layers.Input(shape=(10,))\n",
    "x = tf.keras.layers.Dense(5, activation='relu')(inputs)\n",
    "outputs = tf.keras.layers.Dense(1)(x)\n",
    "model = tf.keras.models.Model(inputs=inputs, outputs=outputs)\n",
    "model.compile(optimizer='adam', loss='mse')\n",
    "print(\"Created minimal model\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Train on tiny dataset\n",
    "X = np.random.rand(10, 10)\n",
    "y = np.random.rand(10, 1)\n",
    "model.fit(X, y, epochs=1, batch_size=2)\n",
    "print(\"Training complete\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "print(\"CI notebook execution successful!\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF
          echo "Created minimal CI notebook"

      - name: Build Docker image
        run: |
          repo2docker --no-run --image-name notebook-test .

      - name: Execute minimal notebook inside container
        run: |
          echo "Using minimal notebook for CI"
          
          # Launch container
          docker run --name nbtest -d notebook-test tail -f /dev/null
          
          # Copy the CI notebook into the container
          docker cp CI_MLFLOW.ipynb nbtest:/home/jovyan/CI_MLFLOW.ipynb
          
          # Verify the notebook exists in container
          docker exec nbtest ls -la /home/jovyan
          
          # Run the minimal notebook
          docker exec nbtest \
            jupyter nbconvert \
              --to notebook \
              --execute /home/jovyan/CI_MLFLOW.ipynb \
              --output executed.ipynb \
              --ExecutePreprocessor.timeout=600
          
          # Tear down
          docker stop nbtest